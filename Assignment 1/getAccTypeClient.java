/*
 * Automatically generated by jrpcgen 1.0.7 on 18/1/15 1:59 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import java.util.*;
import java.text.*;
import java.io.*;

/**
 * The class <code>getAccTypeClient</code> implements the client stub proxy
 * for the BANK_ACCOUNT_PROG remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class getAccTypeClient extends OncRpcClientStub {

    /**
     * Constructs a <code>getAccTypeClient</code> client stub proxy object
     * from which the BANK_ACCOUNT_PROG remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public getAccTypeClient(InetAddress host, int protocol)
           throws OncRpcException, IOException {
        super(host, getAccType.BANK_ACCOUNT_PROG, 1, 0, protocol);
    }

    /**
     * Constructs a <code>getAccTypeClient</code> client stub proxy object
     * from which the BANK_ACCOUNT_PROG remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public getAccTypeClient(InetAddress host, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, getAccType.BANK_ACCOUNT_PROG, 1, port, protocol);
    }

    /**
     * Constructs a <code>getAccTypeClient</code> client stub proxy object
     * from which the BANK_ACCOUNT_PROG remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public getAccTypeClient(OncRpcClient client)
           throws OncRpcException, IOException {
        super(client);
    }

    /**
     * Constructs a <code>getAccTypeClient</code> client stub proxy object
     * from which the BANK_ACCOUNT_PROG remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public getAccTypeClient(InetAddress host, int program, int version, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, 0, protocol);
    }

    /**
     * Constructs a <code>getAccTypeClient</code> client stub proxy object
     * from which the BANK_ACCOUNT_PROG remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public getAccTypeClient(InetAddress host, int program, int version, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, port, protocol);
    }

    /**
     * Call remote procedure GET_ACC_TYPE_1.
     * @param arg1 parameter (of type acc_id_num) to the remote procedure call.
     * @return Result from remote procedure call (of type byte).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public byte GET_ACC_TYPE_1(acc_id_num arg1)
           throws OncRpcException, IOException {
        XdrByte result$ = new XdrByte();
        BufferedWriter writer = null;
        try {
            File logFile=new File("log-client.txt");
            writer = new BufferedWriter(new FileWriter(logFile, true));
            long start = System.currentTimeMillis( );
            client.call(getAccType.GET_ACC_TYPE_1, getAccType.ACC_VERS_1, arg1, result$);
            long end = System.currentTimeMillis( );
            writer.write("GET_ACC_TYPE_1: " + (end - start));
            writer.newLine();
        } catch(Exception e) {}
        finally { 
            try { 
                writer.close();
            } catch(Exception e){}
        }
        return result$.byteValue();
    }

    /**
     * Call remote procedure GET_BALANCE_1.
     * @param arg1 parameter (of type acc_id_num) to the remote procedure call.
     * @return Result from remote procedure call (of type int).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int GET_BALANCE_1(acc_id_num arg1)
           throws OncRpcException, IOException {
        XdrInt result$ = new XdrInt();
        BufferedWriter writer = null;
        try {
            File logFile=new File("log-client.txt");
            writer = new BufferedWriter(new FileWriter(logFile, true));
            long start = System.currentTimeMillis( );
            client.call(getAccType.GET_BALANCE_1, getAccType.ACC_VERS_1, arg1, result$);
            long end = System.currentTimeMillis( );
            writer.write("GET_BALANCE_1: " + (end - start));
            writer.newLine();
        } catch(Exception e) {}
        finally { 
            try { 
                writer.close();
            } catch(Exception e){}
        }
        return result$.intValue();
    }

    /**
     * Call remote procedure SET_BALANCE_1.
     * @param arg1 parameter (of type acc_id_num) to the remote procedure call.
     * @param arg2 parameter (of type int) to the remote procedure call.
     * @return Result from remote procedure call (of type set_balance_return).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public set_balance_return SET_BALANCE_1(acc_id_num arg1, int arg2)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public acc_id_num arg1;
            public int arg2;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                arg1.xdrEncode(xdr);
                xdr.xdrEncodeInt(arg2);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.arg1 = arg1;
        args$.arg2 = arg2;
        set_balance_return result$ = new set_balance_return();
        BufferedWriter writer = null;
        try {
            File logFile=new File("log-client.txt");
            writer = new BufferedWriter(new FileWriter(logFile, true));
            long start = System.currentTimeMillis( );
            client.call(getAccType.SET_BALANCE_1, getAccType.ACC_VERS_1, args$, result$);
            long end = System.currentTimeMillis( );
            writer.write("SET_BALANCE_1: " + (end - start));
            writer.newLine();
        } catch(Exception e) {}
        finally { 
            try { 
                writer.close();
            } catch(Exception e){}
        }
        return result$;
    }

    /**
     * Call remote procedure TRANSACTION_1.
     * @param arg1 parameter (of type acc_id_num) to the remote procedure call.
     * @param arg2 parameter (of type acc_id_num) to the remote procedure call.
     * @param arg3 parameter (of type int) to the remote procedure call.
     * @return Result from remote procedure call (of type transaction_return).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public transaction_return TRANSACTION_1(acc_id_num arg1, acc_id_num arg2, int arg3)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public acc_id_num arg1;
            public acc_id_num arg2;
            public int arg3;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                arg1.xdrEncode(xdr);
                arg2.xdrEncode(xdr);
                xdr.xdrEncodeInt(arg3);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.arg1 = arg1;
        args$.arg2 = arg2;
        args$.arg3 = arg3;
        transaction_return result$ = new transaction_return();
        BufferedWriter writer = null;
        try {
            File logFile=new File("log-client.txt");
            writer = new BufferedWriter(new FileWriter(logFile, true));
            long start = System.currentTimeMillis( );
            client.call(getAccType.TRANSACTION_1, getAccType.ACC_VERS_1, args$, result$);
            long end = System.currentTimeMillis( );
            writer.write("TRANSACTION_1: " + (end - start));
            writer.newLine();
        } catch(Exception e) {}
        finally { 
            try { 
                writer.close();
            } catch(Exception e){}
        }
        return result$;
    }

    /**
     * Call remote procedure GET_TRANSACTIOn_HISTORY_1.
     * @param arg1 parameter (of type acc_id_num) to the remote procedure call.
     * @return Result from remote procedure call (of type LINKEDLIST).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public LINKEDLIST GET_TRANSACTIOn_HISTORY_1(acc_id_num arg1)
           throws OncRpcException, IOException {
        LINKEDLIST result$ = new LINKEDLIST();
        BufferedWriter writer = null;
        try {
            File logFile=new File("log-client.txt");
            writer = new BufferedWriter(new FileWriter(logFile, true));
            long start = System.currentTimeMillis( );
            client.call(getAccType.GET_TRANSACTIOn_HISTORY_1, getAccType.ACC_VERS_1, arg1, result$);
            long end = System.currentTimeMillis( );
            writer.write("GET_TRANSACTIOn_HISTORY_1: " + (end - start));
            writer.newLine();
        } catch(Exception e) {}
        finally { 
            try { 
                writer.close();
            } catch(Exception e){}
        }
        return result$;
    }

}
// End of getAccTypeClient.java
