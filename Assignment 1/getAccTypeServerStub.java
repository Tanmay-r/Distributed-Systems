/*
 * Automatically generated by jrpcgen 1.0.7 on 17/1/15 1:57 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class getAccTypeServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public getAccTypeServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public getAccTypeServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public getAccTypeServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(getAccType.BANK_ACCOUNT_PROG, 1),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 1: {
                acc_id_num args$ = new acc_id_num();
                call.retrieveCall(args$);
                XdrByte result$ = new XdrByte(GET_ACC_TYPE_1(args$));
                call.reply(result$);
                break;
            }
            case 2: {
                acc_id_num args$ = new acc_id_num();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(GET_BALANCE_1(args$));
                call.reply(result$);
                break;
            }
            case 3: {
                class XdrAble$ implements XdrAble {
                    public acc_id_num arg1;
                    public int arg2;
                    public void xdrEncode(XdrEncodingStream xdr)
                        throws OncRpcException, IOException {
                    }
                    public void xdrDecode(XdrDecodingStream xdr)
                        throws OncRpcException, IOException {
                        arg1 = new acc_id_num(xdr);
                        arg2 = xdr.xdrDecodeInt();
                    }
                };
                XdrAble$ args$ = new XdrAble$();
                call.retrieveCall(args$);
                set_balance_return result$ = SET_BALANCE_1(args$.arg1, args$.arg2);
                call.reply(result$);
                break;
            }
            case 4: {
                class XdrAble$ implements XdrAble {
                    public acc_id_num arg1;
                    public acc_id_num arg2;
                    public int arg3;
                    public void xdrEncode(XdrEncodingStream xdr)
                        throws OncRpcException, IOException {
                    }
                    public void xdrDecode(XdrDecodingStream xdr)
                        throws OncRpcException, IOException {
                        arg1 = new acc_id_num(xdr);
                        arg2 = new acc_id_num(xdr);
                        arg3 = xdr.xdrDecodeInt();
                    }
                };
                XdrAble$ args$ = new XdrAble$();
                call.retrieveCall(args$);
                transaction_return result$ = TRANSACTION_1(args$.arg1, args$.arg2, args$.arg3);
                call.reply(result$);
                break;
            }
            case 5: {
                acc_id_num args$ = new acc_id_num();
                call.retrieveCall(args$);
                LINKEDLIST result$ = GET_TRANSACTIOn_HISTORY_1(args$);
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract byte GET_ACC_TYPE_1(acc_id_num arg1);

    public abstract int GET_BALANCE_1(acc_id_num arg1);

    public abstract set_balance_return SET_BALANCE_1(acc_id_num arg1, int arg2);

    public abstract transaction_return TRANSACTION_1(acc_id_num arg1, acc_id_num arg2, int arg3);

    public abstract LINKEDLIST GET_TRANSACTIOn_HISTORY_1(acc_id_num arg1);

}
// End of getAccTypeServerStub.java
